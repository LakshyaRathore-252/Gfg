// ============================================================== Stack Approach ===============================================================================
/Function to reverse the queue.
queue<int> rev(queue<int> q)
{
    stack<int>s;
    
    while(!q.empty())
    {   
        int element = q.front();
        q.pop();
        s.push(element);

        
    }
    
    while(!s.empty())
    {
        int element = s.top();
        s.pop();
        q.push(element);
    }
    return q;
    
}

//Time Complexity : O(N)
// Space Complexity : O(N)


// ========================================================= Recurssion Approach =========================================================================================

//function Template for C++

//Function to reverse the queue.
void reverse(queue<int> &q){
    //base case
    if(q.empty()){
        return;
    }
    
    int num = q.front();
    q.pop();
    // recursive call kr do
    reverse(q);
    
    q.push(num);
}
queue<int> rev(queue<int> q)
{

    reverse(q);
    return q;
    
}


// Time Complexity : O(N)
// Space Complexity : O(1)
